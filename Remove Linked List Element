/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        
        if(head==nullptr){
            return {};
        }
         ListNode* curr = head;
        ListNode* prev=head;
        while(curr && curr->val==val){
            
            head=head->next;
            curr=head;
        }
        
        while(curr){
            
           while(curr && curr->val!=val){
               prev=curr;
               curr=curr->next;
           }
            
            if(curr==nullptr){
               return head;
            }
            prev->next=curr->next;
            delete(curr);
            curr=prev->next;
        }
        return head;
        
    }
};





/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        if(head==NULL)
            return NULL;
        
ListNode* temp = head;
        while(temp!=NULL)
        {
            
        if(temp->next&&temp->next->val== val)
        {
            temp->next=temp->next->next;
        }
            else
            temp=temp->next;
        }
        if(head->val==val)
            head=head->next;
        return head;
    }
};
