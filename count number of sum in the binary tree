/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
//      vector<vector<int>> result;
//     void helper(TreeNode* root, vector<int>& path,int sum){
        
//         if (!root) 
//         return; 
  
//     // add current node to the path 
//     path.push_back(root->val); 
  
//     // check if there's any k sum path 
//     // in the left sub-tree. 
//     helper(root->left, path, sum); 
  
//     // check if there's any k sum path 
//     // in the right sub-tree. 
//     helper(root->right, path, sum); 
  
//     // check if there's any k sum path that 
//     // terminates at this node 
//     // Traverse the entire path as 
//     // there can be negative elements too 
//     int f = 0; 
//     for (int j=path.size()-1; j>=0; j--) 
//     { 
//         f += path[j]; 
  
//         // If path sum is k, print the path 
//         if (f == sum) 
//            result.push_back(path);
//     } 
  
//     // Remove the current element from the path 
//     path.pop_back(); 
//     }
    void k_paths(TreeNode* root, int sum, unordered_map<int, int>& p,  
                                         int temp_sum, int &res) 
{ 
    // If root is not null 
    if (root)  
    { 
        // If root value and previous sum equal  
        // to k then increase the count   
        if (temp_sum + root->val == sum)  
            res++; 
          
        // Add those values also which differes  
        // by the current sum and root data by k 
        res += p[temp_sum + root->val - sum];  
          
        // Insert the sum + root value in the map 
        p[temp_sum + root->val]++;  
  
        // Move to left and right trees 
        k_paths(root->left, sum, p, temp_sum + root->val, res);  
        k_paths(root->right, sum, p, temp_sum + root->val, res);  
          
        // remove the sum + root->data value from the  
        // map if they are n not required further or  
        // they do no sum up to k in any way 
        p[temp_sum + root->val]--;  
    } 
} 
    
    int pathSum(TreeNode* root, int sum) {
       
        // vector<int> temp;
        // helper(root,temp,sum);
        // return result.size();
        
        int res = 0; 
      
    
    unordered_map<int, int> p; 
      
   
    k_paths(root, sum, p, 0, res); 
    
    return res; 
    }
    
};
