class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
//         sort(nums.begin(),nums.end());
//         int c=0;
//         int n=nums.size()-1;
//         if(nums.size()<=1){
//             return nums;
//         }
//         if(nums.size()==2){
//             if(nums[0]==nums[1]){
//                 return {};
//             }
//             else{
//                 return nums;
//             }
//         }
//         vector<int> r;
//         while(n>=0 && c<=2){
//             if( n==0 || nums[n]!=nums[n-1]){
//                 c++;
//                 r.push_back(nums[n]);
//                 n--;
//             }
//             else{
//                 n=n-2;
//             }
            
//         }
//         return r;
        
        int x = 0;
        for(int i=0;i<nums.size();i++)
            x = x^nums[i];
        
        vector <int> ans{0,0};
        int lowest_bit = x & -x;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i] & lowest_bit)
                ans[0] ^= nums[i];
            else
                ans[1] ^= nums[i];
        }
        
        return ans;

        
    }
};
