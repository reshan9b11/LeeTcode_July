////////////////////////////LEET CODE/////////////////////////////////////
class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        vector<int> freq(26, 0);
        for (auto t : tasks) {
            freq[t - 'A']++;
        }
        sort(begin(freq), end(freq), std::greater<int>());
        int fmax = freq[0];
        int max_idle_time = (freq[0] -1) * n;
        cout << max_idle_time << endl;
        for(int i = 1; i < freq.size() && max_idle_time > 0; i++) {
            max_idle_time = max_idle_time - min(fmax-1, freq[i]);
        }
        max_idle_time = max(max_idle_time, 0);
        return max_idle_time + tasks.size();
    }
};


////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        if(n==0){
            return tasks.size();
        }
        vector<int> count(26,0);
        for(auto task:tasks){
            
            count[task - 'A']++;
        }
        sort(count.begin(),count.end());
        int result = 0;
        while (count[25] > 0) {
            for (int i = 0; i <= n; i++) {
                result++;
                if (i > 25) {
                    continue;
                }
                int index = 25 - i;
                if (count[index] > 0) {
                    count[index]--;
                }
                if (count[index] == 0 && count[25] == 0) {
                    break;
                }
            }
            sort(count.begin(),count.end());
        }
        return result;
       
    }
};

///////////////////////////////////////////////LEET CODE ///////////////////////////////////////
class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        if (n == 0) {
            return tasks.size();
        }
        int count[26] = {0};
        for (int i = 0; i < tasks.size(); i++) {
            count[tasks[i] - 'A'] ++;
        }
        int maxCount = 0, size = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] > maxCount) {
                maxCount = count[i];
                size = 1;
            } else if (count[i] == maxCount) {
                size ++;
            }
        }
        int total = (maxCount - 1) * (n + 1) + size;
        return total > tasks.size() ? total : tasks.size();
    }
};
