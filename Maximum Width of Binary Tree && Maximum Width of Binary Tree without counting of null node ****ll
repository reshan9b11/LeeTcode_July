/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if (root == null) {
            return 0;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        int max = 1, leftmost = 1, rightmost = 1;
        root.val = 1;
        queue.offer(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode cur = queue.poll();
                if (i == 0) {
                    leftmost = cur.val;
                }
                if (i == size - 1) {
                    rightmost = cur.val;
                }
                if (cur.left != null) {
                    cur.left.val = cur.val * 2;
                    queue.offer(cur.left);
                }
                if (cur.right != null) {
                    cur.right.val = cur.val * 2 + 1;
                    queue.offer(cur.right);
                }
            }
            max = Math.max(max, rightmost - leftmost + 1);

        }
        return max;
    }
}

////Above Code Courtesy : https://hjweds.gitbooks.io/leetcode/maximum-width-of-binary-tree.html



//Without Counting null node //////////////////////////////////
//////////////////////////////////
////////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////
//////////////////////////////////////
//Both using Queue and itetrative Approach 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
//     int getWidth(TreeNode* root , int level){
//         if(root==nullptr){
//             return 0;
//         }
        
//         if(level==1){
//             return 1;
//         }
//         else if(level > 1)  {
//         return getWidth(root->left, level - 1) +  
//                 getWidth(root->right, level - 1); 
//     }
//         return 0;
    
// }
    
//     int height(TreeNode* root){
//         if(root==nullptr){
//             return 0;
//         }
//         else{
            
//             int left=height(root->left);
//             int right=height(root->right);
//             return left > right ? left+1 : right +1;
            
//         }
//         return 0;
//     }
        
public:
    int widthOfBinaryTree(TreeNode* root) {
        
//             int max=0;
//             int temp;
//         int heightt=height(root);
//         for(int i=1;i<=heightt;i++){
//             temp=getWidth(root,i);
//              max= max < temp ? temp : max; 
            
//         }
//               return max;
        
        if(root==nullptr){
            return 0;
        }
        //int max=0;
        queue<TreeNode*> q;
        q.push(root);
        long long int max = 1, leftmost = 1, rightmost = 1;
        root->val = 1;
        
        while(!q.empty())
        {
            
            int count=q.size();
            max = max < count ? count : max;
            
           for (int i = 0; i < count; i++) {
                TreeNode* cur = q.front();
               q.pop();
               
                if (i == 0) {
                    leftmost = cur->val;
                }
                if (i == count - 1) {
                    rightmost = cur->val;
                }
                if (cur->left != nullptr) {
                    cur->left->val = cur->val * 2;
                    q.push(cur->left);
                }
                if (cur->right != nullptr) {
                    cur->right->val = cur->val * 2 + 1;
                    q.push(cur->right);
                }
            }
            max = max > rightmost - leftmost + 1 ? max : rightmost - leftmost + 1;

        }
        return max;
    }
};
